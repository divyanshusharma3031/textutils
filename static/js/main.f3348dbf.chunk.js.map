{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","className","type","role","msg","Navbar","mode","style","border","caretColor","href","title","id","placeholder","inside","onClick","toggleMode","htmlFor","toggleMode2","TextForm","useState","text","setText","color","textarea","value","onChange","event","target","rows","backgroundColor","showalert","newtext","toUpperCase","toLowerCase","array","split","index","length","charAt","substr","newText","join","x","NoOfWords","defaultProps","flag","App","Setmode","setin","alerts","setalert","bor","setbor","message","setTimeout","document","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f3348dbf.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n  return (\r\n      props.alert && \r\n    <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        \r\n       <strong>{props.alert.type}</strong>: {props.alert.msg}\r\n  </div>\r\n  );\r\n}\r\n\r\nexport default Alert;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n// import { Link } from 'react-router-dom'\r\n\r\nexport default function Navbar(props)\r\n{\r\n    return(\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`} style={{border:props.border,caretColor:'blue'}}>\r\n        <div className=\"container-fluid\">\r\n          <a className=\"navbar-brand\" href=\"#\">\r\n            {props.title}\r\n          </a>\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            data-bs-toggle=\"collapse\"\r\n            data-bs-target=\"#navbarSupportedContent\"\r\n            aria-controls=\"navbarSupportedContent\"\r\n            aria-expanded=\"false\"\r\n            aria-label=\"Toggle navigation\"\r\n          >\r\n          <span className=\"navbar-toggler-icon\"> </span>\r\n          </button>\r\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                  Home\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">\r\n                  Link\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a href=\"#\" className=\"nav-link\">\r\n                  Notifications\r\n                </a>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a href=\"#\" className=\"nav-link\">\r\n                  About Us\r\n                </a>\r\n              </li>\r\n            </ul>\r\n            <form className=\"d-flex\">\r\n              <input\r\n                className=\"form-control me-2\"\r\n                type=\"search\"\r\n                placeholder=\"Search\"\r\n                aria-label=\"Search\"\r\n              />\r\n              <button className=\"btn btn-outline-success\" type=\"submit\">\r\n                Search\r\n              </button>\r\n            </form>\r\n            <div className={`form-check form-switch mx-4 text-${props.inside}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n            <div className={`form-check form-switch mx-4 text-${props.inside}`}>\r\n  <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode2} role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable High Contrast Mode</label>\r\n</div>\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes={\r\n    title:PropTypes.string.isRequired\r\n    //is required se ye field [title ] required field ho gayi it means that we have to pass a title for sure otherwise it will generate a warning\r\n}\r\nNavbar.defaultProps={\r\n    title:\"Title here\"\r\n}\r\n//set isiliye karte hai ki ham ye define kar sake ki konsa data type aana chaiye kaha par.","import React,{useState} from \"react\";\r\nimport PropTypes from 'prop-types'\r\nexport default function TextForm(props) {\r\n  const [text,setText]=useState(\"Enter Text Here\");\r\n  // text cant be updated like a normal variable in react.\r\n  const handleOnChange=(event)=>{\r\n    // console.log(\"Upper Case was Changed\");\r\n    setText(event.target.value);\r\n  }\r\n  const handleUpClick=()=>{\r\n    \r\n      // console.log(\"Upper Case was Clicked\");\r\n      props.showalert(\"Converted to upper Case\",\"success\")\r\n      let newtext=text.toUpperCase();\r\n      setText(newtext);\r\n    // setText(\"You have clicked on upper text\");\r\n\r\n  }\r\n  const RemoveExtra=()=>\r\n  {\r\n    let newText=text.split(/[ ]+/);\r\n    props.showalert(\"Extra Spaces Removed\",\"success\")\r\n\r\n    setText(newText.join(' '));\r\n  }\r\n  const handleUpClick2=()=>{\r\n\r\n      // console.log(\"Upper Case was Clicked\");\r\n      let newtext=text.toLowerCase();\r\n      props.showalert(\"Converted to Lower Case\",\"success\")\r\n\r\n      setText(newtext);\r\n\r\n    // setText(\"You have clicked on upper text\");\r\n\r\n  }\r\n  const clearclick=()=>{\r\n    setText('');\r\n    props.showalert(\"Cleared\",\"success\")\r\n\r\n  }\r\n  const SmartConvert=()=>{\r\n    props.showalert(\"Every Word's First Letter Capitalize\",\"success\")\r\n\r\n    let newtext='';\r\n    let array=text.split(\" \");\r\n    for (let index = 0; index < array.length; index++) {\r\n      if(array[index][0]>='a' && array[index][0]<='z')\r\n      {\r\n          newtext+=array[index].charAt(0).toUpperCase();\r\n          newtext+=array[index].substr(1);\r\n          newtext+=\" \";\r\n      }\r\n      else\r\n      {\r\n        newtext+=array[index];\r\n        newtext+=\" \";\r\n\r\n      }\r\n    }\r\n    setText(newtext)\r\n  }\r\n  const NoOfWords=(array)=>\r\n  {\r\n    let x=0;\r\n    for (let index = 0; index < array.length; index++) {\r\n      if(array[index].length!==0)\r\n      {\r\n        x++;\r\n      }\r\n    }\r\n    return x;\r\n  }\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        <h1>\r\n          {props.textarea} \r\n        </h1>\r\n        <div className=\"mb-3\">\r\n          <label htmlFor=\"exampleFormControlTextarea1\" className=\"form-label\">\r\n            Example textarea\r\n          </label>\r\n          <textarea\r\n            className=\"form-control\"\r\n            id=\"exampleFormControlTextarea1\"\r\n            value={text} onChange={handleOnChange}\r\n            rows=\"3\"\r\n            style={{backgroundColor:props.mode==='dark'?'grey':'white',color:props.mode==='dark'?'white':'black'}}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick}>Convert To UpperCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={handleUpClick2}>Convert To LowerCase</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={SmartConvert}>Smart Convert</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={RemoveExtra}>Remove Extra Spaces</button>\r\n        <button className=\"btn btn-primary mx-2\" onClick={clearclick}>Clear Text</button>\r\n      </div>\r\n      <div className=\"container my-2\" style={{color:props.mode==='dark'?'white':'black'}}>\r\n        {/* my-2 will give 2 margin same goes for my-x gives x margin in y. */}\r\n        <h1> Your Text Summary</h1>\r\n        <p>\r\n          {NoOfWords(text.split(\" \"))} words and {text.length} characters\r\n        </p>\r\n        <p>\r\n          Expected time to read:{text.split(\" \").length*0.008} Minutes\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\nTextForm.propTypes={\r\n  textarea:PropTypes.string.isRequired\r\n  //is required se ye field [title ] required field ho gayi it means that we have to pass a title for sure otherwise it will generate a warning\r\n}","// import logo from \"./logo.svg\";\nimport { useState } from \"react\";\nimport \"./App.css\";\n// import About from \"./Components/about\";~\nimport Alert from \"./Components/Alert\";\nimport Navbar from './Components/Navbar'\nimport TextForm from './Components/TextForm'\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from \"react-router-dom\";\nlet flag=false;\nfunction App() {\n  const [mode,Setmode]=useState('light');\n  const [inside,setin]=useState('dark');\n  const [alerts,setalert]=useState(null);\n  const [bor,setbor]=useState(\"0px solid white\")\n  const showalert=(message,type)=>\n  {\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n  const toggleMode=()=>\n  {\n    if(mode==='light' )\n    {\n      Setmode('dark');\n      setin('light');\n      document.body.style.backgroundColor=\"#042743\";\n      showalert(\"Dark Mode has been enabled\",\"success\");\n      setbor(\"0px solid white\");\n      flag=true;\n    }\n    else\n    {\n      Setmode('light');\n      setin('dark');\n      document.body.style.backgroundColor=\"white\";\n      showalert(\"Light Mode has been enabled\",\"success\");\n      flag=false;\n    }\n  }\n  const toggleMode2=()=>\n  {\n    if(mode==='light' || flag===true)\n    {\n      Setmode('dark');\n      setin('light');\n      document.body.style.backgroundColor=\"#212529\";\n      showalert(\"High Contrast Mode has been enabled\",\"success\");\n      setbor(\"1px solid white\");\n      flag=false;\n    }\n    else\n    {\n      Setmode('light');\n      setin('dark');\n      document.body.style.backgroundColor=\"white\";\n      showalert(\"Light Mode has been enabled\",\"success\");\n    }\n  }\n  return (\n    <>\n    {/* <Router> */}\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} toggleMode2={toggleMode2} inside={inside} border={bor}/>\n      <Alert alert={alerts}/>\n      {/* title here likh kar aa jaayga as hamne kuch pass nahi kiya to wo default arguments le lega */}\n      {/* <div className=\"container my-3\">\n      <Routes>\n          <Route path=\"/\" element={}>\n            \n          </Route>\n          <Route path=\"/about\" element={<About mode={mode}/>}>\n          </Route>\n      </Routes>\n      </div> */}\n    {/* </Router> */}\n    <TextForm textarea=\"Welcome\" mode={mode} showalert={showalert}/>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}